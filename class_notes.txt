# version control using PyCharm's GUI
# -----------------------------------

#  Enable git as your local version control system. In the PyCharm GUI go to VCS -> Enable Version Control Integration.
# Make sure that you select Git when asked which version control system to use.
# This is equivalent to typing git init in the Terminal.\

# If successful, you should now have a new Git Pane (bottomm left) where you can see the Git Console and Git Logs

# Add the Unversioned Files and Commit:
# 1) All the files in our project will turn red because they are not yet added to the staging area to be tracked by git.
# 2) Add and commit your files to version control using the Commit tool (The Commit tool window will become visible on
#    the left side after you've enabled version control. The files and folders (e.g., PyCharm's .idea folder) listed in
#    the .gitignore file will be excluded.
# 3) Add all the unversioned files, write your commit message and click "commit".
# 4) All the tracked files should now no longer be red.
# 5) If successful, you should now be able to see your first commit in the Git Log pane


# Setup a WSGI server with gunicorn (for deployment)
# --------------------------------------------------

# WSGI stands for Web Server Gateway Interface and it's described here: https://www.python.org/dev/peps/pep-3333/

# In summary: normal web servers can't run Python applications, so a special type of server was created (WSGI) to run
# our Flask app.  Essentially, a WSGI server standardises the language and protocols between our Python Flask
# application and the host server.

# There are many WSGIs to choose from, but we'll use the most popular - gunicorn. That way our hosting provider will
# call gunicorn to run our code.

# the process:
# ------------
# Add gunicorn to the requirements.txt

# Create a Procfile: Next, we need to tell our hosting provider about our gunicorn server, what our app is called, and
# how to run our Flask app. We do that using a config file called a Procfile:

# 1) Create a new file in the project top-level folder called Procfile. When you create the new file, PyCharm will
#    prompt you to track the new file under git version control. Agree by clicking add.
#    NOTE: make sure you spell the name of the file exactly as you see above, with a capital P and no file extension.

# 2) Type the following into the Procfile: web: gunicorn main:app
#    This will tell our hosting provider to create a web worker that is able to receive HTTP requests. The Procfile
#    also says to use gunicorn to serve your web app. And finally it specifies the Flask app object is the main.py
#    file. That way the hosting provider knows about the entry point for the app and what our app is called.

# Commit your changes: At this point you made some changes in the main.py with your environment variables and created a
# new file in the project. Go to the Commit Tool and save your changes under version control.

# Push to your remote on Github: Go to your PyCharm settings, search "github" and link Pycharm with GitHub (add your
# github account in PyCharm)

# Once you start using git for version control, PyCharm will change the VCS menu to read "Git" instead.
# Go to Git -> GitHub -> Share project on Github. This will push your code to your remote. Pick your repository name
# (any name will do). And click "Share". You should then see your project as a GitHub's website.

# Create an account with a free hosting service (render.com).
# You can create an account on render simply by signing up via Github

# Create a new Web Service in cyclic
# Choose your blog app that you've uploaded to GitHub and connect your repository

# Edit the Start Command: Most of render.com's defaults are fine. All you need to do is pick a name for your project
# and then change the Start Command to: gunicorn main:app

# make sure you choose the free version (the default is starter, which is paid)

# Add your environment variables at the appropriate fields

# press create web service

# Your web app won't work yet, however. We first need to set up our database and set the environment variable for
# SQLAlchemy.


# Upgrade SQLite Database to PostgreSQL
# -------------------------------------

# When we were coding and testing our Flask website, it was nice to use a simple database like SQLite. But SQLite is a
# file-based database.

# This is its strength and weakness. It's a strength because while we're coding up our database and debugging, it's
# really useful to be able to open the SQLite file using DB Viewer and see how our data looks.

# But it's also a weakness because once it's deployed with a hosting provider (like Heroku or Render) the file
# locations are shifted around every 24 hours or so. This means that your database might just get wiped every day.
# That will mean some very unhappy users

# So we've got to put on our big-boy/big-girl pants and upgrade our simple SQLite database to PosgreSQL, a database
# that can handle millions of data entries and reliably delivers data to users.

# Luckily, because we used SQLAlchemy to create our Flask app, there's nothing we need to change in terms of code.
# We just need to set up the PostgreSQL database.

# the process:
# ------------

# 1) Create a new Postgres database from the website (render.com) menu.

# 2) Next, you will see a form. All you need to do is pick a name for the database and create it.

# 3) again, make sure you choose the free version.

# 4) Once you've created your database, go and find the Internal Database URL in the Info section. You might have to
#    wait a little while until your database is created. Afterwards, simply copy this URL. You will shortly use this as
#    an environment variable.
# 5) Set your SQLALCHEMY_DATABASE_URI environment variable: Go back to your web service settings called "environment"
#    Create an environment variable that matches the name of the key you're using in the main.py ("DB_URI")
# 6) Paste your internal database URL as the key value. You just need to make one small modification. Change the first
#    part from postgres to postgresql. The URI has to start with "postgresql" because this is required by SQLAlchemy:
#
#    How does all this work? SQLite is pre-installed for all Python projects, but here we are using Postgres. The
#    reason we can seamlessly switch from SQLite to Postgres is because we are using the psycopg package in combination
#    with SQLAlchemy. The psycopg module is an incredibly popular PostgreSQL database adapter for Python. (You can see
#    the psycopg package listed in the requirements.txt.)


# if you got this far, Your blog should be up and running now. You've got a blank slate so register your first (admin)
# user and write your first blog post.

