# version control using PyCharm's GUI
# -----------------------------------

#  Enable git as your local version control system. In the PyCharm GUI go to VCS -> Enable Version Control Integration.
# Make sure that you select Git when asked which version control system to use.
# This is equivalent to typing git init in the Terminal.\

# If successful, you should now have a new Git Pane (bottomm left) where you can see the Git Console and Git Logs

# Add the Unversioned Files and Commit:
# 1) All the files in our project will turn red because they are not yet added to the staging area to be tracked by git.
# 2) Add and commit your files to version control using the Commit tool (The Commit tool window will become visible on
#    the left side after you've enabled version control. The files and folders (e.g., PyCharm's .idea folder) listed in
#    the .gitignore file will be excluded.
# 3) Add all the unversioned files, write your commit message and click "commit".
# 4) All the tracked files should now no longer be red.
# 5) If successful, you should now be able to see your first commit in the Git Log pane


# Setup a WSGI server with gunicorn (for deployment)
# --------------------------------------------------

# WSGI stands for Web Server Gateway Interface and it's described here: https://www.python.org/dev/peps/pep-3333/

# In summary: normal web servers can't run Python applications, so a special type of server was created (WSGI) to run
# our Flask app.  Essentially, a WSGI server standardises the language and protocols between our Python Flask
# application and the host server.

# There are many WSGIs to choose from, but we'll use the most popular - gunicorn. That way our hosting provider will
# call gunicorn to run our code.

# the process:
# ------------
# Add gunicorn to the requirements.txt

# Create a Procfile: Next, we need to tell our hosting provider about our gunicorn server, what our app is called, and
# how to run our Flask app. We do that using a config file called a Procfile:

# 1) Create a new file in the project top-level folder called Procfile. When you create the new file, PyCharm will
#    prompt you to track the new file under git version control. Agree by clicking add.
#    NOTE: make sure you spell the name of the file exactly as you see above, with a capital P and no file extension.

# 2) Type the following into the Procfile: web: gunicorn main:app
#    This will tell our hosting provider to create a web worker that is able to receive HTTP requests. The Procfile
#    also says to use gunicorn to serve your web app. And finally it specifies the Flask app object is the main.py
#    file. That way the hosting provider knows about the entry point for the app and what our app is called.

# Commit your changes: At this point you made some changes in the main.py with your environment variables and created a
# new file in the project. Go to the Commit Tool and save your changes under version control.
